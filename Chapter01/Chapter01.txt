
Great Software
    - The customer-friendly programmer says: Great software always does what the customer wants it to. So even if customers think of new ways to use the software, it doesn't break or give them unexpected results.
    - The object-oriented programmer says: Great software is code that is object-oriented. So there's not a bunch of duplicate code, and each object pretty much controls its own behavior. It's also easy to extend because your design is really solid and flexible.
    - The design-guru programmer says: Great software is when you use tried-and-true design patterns and principles. You've kept your objects loosely coupled, and your code open for extension but closed for modification. That also helps make the code more reusable, so you don't have to rework everything to use parts of your application over and over again.

Great Software in 3 easy steps
    1. Make sure your software does what the customer wants it to do.
    2. Apply basic OO principles to add flexibility.
        * Use a textual description of the problem you're trying to solve to make sure that your design lines up with the intended functionality of your application.
        * The mystery of the mismatched object type
            1- Objects should do what their names indicate.
            2- Each object should represent a single concept.
            3- Unused properties are a dead giveaway.
        * Encapsulation allows you to hide the inner workings of your application's parts, but yet make it clear what each part does.
        * Encapsulation is also about breaking your app into logical parts, and then keeping those parts separate. So just like you keep the data in your classes separate from the rest of your app's behavior, we can keep the generic properties of a guitar separate form the actual Guitar object itself.
        * Anytime you see duplicate code, look for a place to encapsulate!
        * The idea behind encapsulation is to protect information in one part of your application from the other parts of your application. In its simplest form, you can protect the data in your class from the rest of your app by making that data private. But sometimes the information might be an entire set of properties - like the details about a guitar - or even behavior - like how a particular type of duck flies.
        * That's the power of encapsulation: by breaking up the different parts of your app, you can change one part without having to change all the other parts.
    3. Strive for a maintainable, reusable design.
    - Functionality: Without me, you'll never actually make the customer happy. No matter how well-designed your application is, I'm the thing that puts a smile on the customer's face.
    - Design Pattern: I'm all about reuse and making sure you're not trying to solve a problem that someone else has already figured out.
    - Encapsulation: You use me to keep the parts of your code that stay the same separate from the parts that change; then it's really easy to make changes to your code without breaking everything.
    - Flexibility: Use me so that your software can change and grow without constant rework. I keep your application from being fragile.

DON'T CREATE PROBLEMS TO SOLVE PROBLEMS.
